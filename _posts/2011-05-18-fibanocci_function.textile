---
layout: default
title: Fibanocci Function
---

{{ page.title }}

p. As we known, fibanocci function f(x) = f(x-1) + f(x-2) when x >1, else x = 0, 1, it is f(x) = 1.
Bellow is my ruby code for this. I have three method.

* loop
* recursion
* block and yield

_Loop_


<div class="highlight"><pre>	<span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
	<span class="nb">puts</span> <span class="s2">&quot;1&quot;</span>
	<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
		<span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
		<span class="nb">puts</span> <span class="n">z</span>
		<span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">z</span>
	<span class="k">end</span>
</pre></div>




_Recursion_


<div class="highlight"><pre>	<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">2</span>
		<span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
	<span class="k">end</span>

	<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
		<span class="nb">puts</span> <span class="n">f</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	<span class="k">end</span>
</pre></div>





_Yield and Block_


<div class="highlight"><pre>	<span class="k">def</span> <span class="nf">fibonacii</span><span class="p">(</span><span class="n">max</span><span class="p">)</span>
		<span class="n">f1</span><span class="p">,</span><span class="n">f2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span>
		<span class="k">while</span> <span class="n">f1</span> <span class="o">&gt;=</span> <span class="n">max</span>
			<span class="k">yield</span> <span class="n">f1</span>
			<span class="n">f1</span><span class="p">,</span><span class="n">f2</span> <span class="o">=</span> <span class="n">f2</span><span class="p">,</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span>
		<span class="k">end</span>
	<span class="k">end</span>

	<span class="n">fibonacii</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">f</span><span class="p">}</span>
</pre></div>

